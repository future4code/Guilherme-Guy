{"version":3,"sources":["components/PokeCard/Index.js","App.js","index.js"],"names":["Index","props","useState","pokemonOne","setPokemonOne","useEffect","pokeName","pokemon","axios","get","then","response","data","catch","err","console","log","name","weight","types","type","sprites","src","front_default","alt","App","pokeList","setPokeList","setPokeName","results","className","onChange","event","target","value","map","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MA0CeA,EAtCD,SAACC,GAAW,IAAD,EAEeC,mBAAS,IAFxB,mBAEdC,EAFc,KAEFC,EAFE,KA0BrB,OAPEC,qBAAU,WAZQ,IAACC,IAaLL,EAAMM,QAZlBC,IACGC,IADH,4CAC4CH,IACzCI,MAAK,SAACC,GAELP,EAAcO,EAASC,SAExBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAMf,CAACb,EAAMM,UAMR,6BACA,2BAAIJ,EAAWc,MACf,2BAAId,EAAWe,OAAf,OACCf,EAAWgB,OAAS,2BAAIhB,EAAWgB,MAAM,GAAGC,KAAKH,MACjDd,EAAWkB,SACV,yBAAKC,IAAKnB,EAAWkB,QAAQE,cAAeC,IAAKrB,EAAWc,SCmBvDQ,EAnDH,SAAAxB,GAAW,IAAD,EAGYC,mBAAS,IAHrB,mBAGbwB,EAHa,KAGHC,EAHG,OAIYzB,mBAAS,IAJrB,mBAIbI,EAJa,KAIHsB,EAJG,KAOlBvB,qBAAU,WAERG,IACCC,IAAI,gDACJC,MAAK,SAAAC,GAEJgB,EAAYhB,EAASC,KAAKiB,YAE3BhB,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAGf,CAACY,IAUJ,OACE,yBAAKI,UAAU,OAGX,4BAAQC,SAXQ,SAAAC,GACpBJ,EAAYI,EAAMC,OAAOC,SAWnB,4BAAQA,MAAO,IAAf,UAECR,EAASS,KAAI,SAAA5B,GACZ,OACE,4BAAQ6B,IAAK7B,EAAQU,KAAMiB,MAAO3B,EAAQU,MACvCV,EAAQU,UAOhBX,GAAY,kBAAC,EAAD,CAAUC,QAASD,MC9CxC+B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.fff0d1e0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst Index = (props) => {\r\n\r\n    const [pokemonOne, setPokemonOne] = useState({});\r\n\r\n\r\n\r\n\r\n    const pegaPokemon = (pokeName) => {\r\n        axios\r\n          .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\r\n          .then((response) => {\r\n            // guarda as infos do pokemon no estado\r\n            setPokemonOne(response.data);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      };\r\n    \r\n      useEffect(() => {\r\n        pegaPokemon(props.pokemon);\r\n      }, [props.pokemon]);\r\n  \r\n\r\n    //   const pokemon = pokemon;\r\n\r\n    return (\r\n        <div>\r\n        <p>{pokemonOne.name}</p>\r\n        <p>{pokemonOne.weight} Kg</p>\r\n        {pokemonOne.types && <p>{pokemonOne.types[0].type.name}</p>}\r\n        {pokemonOne.sprites && (\r\n          <img src={pokemonOne.sprites.front_default} alt={pokemonOne.name} />\r\n        )}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Index\r\n\r\n\r\n// class PokeCard extends React.Component {\r\n//   state = {\r\n//     // valor do estado que guarda infos e foto do pokemon\r\n//     pokemon: {}\r\n//   };\r\n\r\n//   // método que roda após a montagem do componente\r\n//   componentDidMount() {\r\n//     this.pegaPokemon(this.props.pokemon);\r\n//   }\r\n\r\n//   // método que roda após a atualização do componente.\r\n//   // Um dos casos de atualização do componente é a\r\n//   // mudança da props que está sendo passado pra ele\r\n//   componentDidUpdate(prevProps) {\r\n//     // aqui, é feita uma verificação da props anterior com a props atual.\r\n//     // Caso a props anterior seja diferente da props atual,\r\n//     // a função pegaPokemon é chamada.\r\n//     if (prevProps.pokemon !== this.props.pokemon) {\r\n//       this.pegaPokemon(this.props.pokemon);\r\n//     }\r\n//   }\r\n\r\n//   // função que bate na poke API com um nome específico de pokemon\r\n//   // Isso permite que consigamos pegar as infos dos pokemons.\r\n//   // Nos métodos de ciclo de vida, ela é chamada passando como\r\n//   // parâmetro o nome de pokemon que está chegando como props.\r\n//   pegaPokemon = pokeName => {\r\n//     axios\r\n//       .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\r\n//       .then(response => {\r\n//         // guarda as infos do pokemon no estado\r\n//         this.setState({ pokemon: response.data });\r\n//       })\r\n//       .catch(err => {\r\n//         console.log(err);\r\n//       });\r\n//   };\r\n\r\n//   render() {\r\n//     const pokemon = this.state.pokemon;\r\n\r\n//     return (\r\n//       <div>\r\n//         <p>{pokemon.name}</p>\r\n//         <p>{pokemon.weight} Kg</p>\r\n//         {pokemon.types && <p>{pokemon.types[0].type.name}</p>}\r\n//         {pokemon.sprites && (\r\n//           <img src={pokemon.sprites.front_default} alt={pokemon.name} />\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default PokeCard;\r\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport PokeCard from \"./components/PokeCard/Index\";\n\nconst App = props =>  {\n\n\n  const [pokeList, setPokeList] = useState([]);\n  const [pokeName, setPokeName] = useState(\"\")\n\n\n    useEffect(() => {\n\n      axios\n      .get(\"https://pokeapi.co/api/v2/pokemon/?limit=151\")\n      .then(response => {\n        // função que está setando no estado os 151 pokemons\n        setPokeList(response.data.results);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n  }, [pokeList]);\n\n\n const changePokeName = event => {\n    setPokeName(event.target.value);\n  };\n\n\n\n\n  return (\n    <div className=\"App\">\n        {/* evento onChange chama função toda vez que o usuário \n        escolhe um novo pokemon no dropdown */}\n        <select onChange={changePokeName}>\n          <option value={\"\"}>Nenhum</option>\n          {/* renderizando a lista de pokemons como opções do select */}\n          {pokeList.map(pokemon => {\n            return (\n              <option key={pokemon.name} value={pokemon.name}>\n                {pokemon.name}\n              </option>\n            );\n          })}\n        </select>\n        {/* expressão booleana que renderiza o componente PokeCard,\n        caso o valor de pokeName, no estado, seja true */}\n        {pokeName && <PokeCard pokemon={pokeName} />}\n      </div>\n  )\n}\n\nexport default App\n\n\n// class App extends React.Component {\n//   state = {\n//     // lista de pokemons que está sendo guardada no estado\n//     pokeList: [],\n//     // nome do pokemon guardado no estado, assim que o usuário\n//     // escolhe um nome no dropdown\n//     pokeName: \"\"\n//   };\n\n//   // método que roda após a montagem do componente\n//   componentDidMount = () => {\n//     // função axios que está batendo na API e buscando 151 pokemons\n//     axios\n//       .get(\"https://pokeapi.co/api/v2/pokemon/?limit=151\")\n//       .then(response => {\n//         // função que está setando no estado os 151 pokemons\n//         this.setState({ pokeList: response.data.results });\n//       })\n//       .catch(err => {\n//         console.log(err);\n//       });\n//   };\n\n//   changePokeName = event => {\n//     this.setState({ pokeName: event.target.value });\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         {/* evento onChange chama função toda vez que o usuário \n//         escolhe um novo pokemon no dropdown */}\n//         <select onChange={this.changePokeName}>\n//           <option value={\"\"}>Nenhum</option>\n//           {/* renderizando a lista de pokemons como opções do select */}\n//           {this.state.pokeList.map(pokemon => {\n//             return (\n//               <option key={pokemon.name} value={pokemon.name}>\n//                 {pokemon.name}\n//               </option>\n//             );\n//           })}\n//         </select>\n//         {/* expressão booleana que renderiza o componente PokeCard,\n//         caso o valor de pokeName, no estado, seja true */}\n//         {this.state.pokeName && <PokeCard pokemon={this.state.pokeName} />}\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}