{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\LaFlamme\\\\Desktop\\\\Guilherme-Guy\\\\semana9\\\\pokeapi\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import axios from\"axios\";var Index=function Index(props){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),pokemonOne=_useState2[0],setPokemonOne=_useState2[1];var pegaPokemon=function pegaPokemon(pokeName){axios.get(\"https://pokeapi.co/api/v2/pokemon/\".concat(pokeName)).then(function(response){// guarda as infos do pokemon no estado\nsetPokemonOne(response.data);}).catch(function(err){console.log(err);});};useEffect(function(){pegaPokemon(props.pokemon);},[props.pokemon]);//   const pokemon = pokemon;\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"p\",null,pokemonOne.name),/*#__PURE__*/React.createElement(\"p\",null,pokemonOne.weight,\" Kg\"),pokemonOne.types&&/*#__PURE__*/React.createElement(\"p\",null,pokemonOne.types[0].type.name),pokemonOne.sprites&&/*#__PURE__*/React.createElement(\"img\",{src:pokemonOne.sprites.front_default,alt:pokemonOne.name}));};export default Index;// class PokeCard extends React.Component {\n//   state = {\n//     // valor do estado que guarda infos e foto do pokemon\n//     pokemon: {}\n//   };\n//   // método que roda após a montagem do componente\n//   componentDidMount() {\n//     this.pegaPokemon(this.props.pokemon);\n//   }\n//   // método que roda após a atualização do componente.\n//   // Um dos casos de atualização do componente é a\n//   // mudança da props que está sendo passado pra ele\n//   componentDidUpdate(prevProps) {\n//     // aqui, é feita uma verificação da props anterior com a props atual.\n//     // Caso a props anterior seja diferente da props atual,\n//     // a função pegaPokemon é chamada.\n//     if (prevProps.pokemon !== this.props.pokemon) {\n//       this.pegaPokemon(this.props.pokemon);\n//     }\n//   }\n//   // função que bate na poke API com um nome específico de pokemon\n//   // Isso permite que consigamos pegar as infos dos pokemons.\n//   // Nos métodos de ciclo de vida, ela é chamada passando como\n//   // parâmetro o nome de pokemon que está chegando como props.\n//   pegaPokemon = pokeName => {\n//     axios\n//       .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\n//       .then(response => {\n//         // guarda as infos do pokemon no estado\n//         this.setState({ pokemon: response.data });\n//       })\n//       .catch(err => {\n//         console.log(err);\n//       });\n//   };\n//   render() {\n//     const pokemon = this.state.pokemon;\n//     return (\n//       <div>\n//         <p>{pokemon.name}</p>\n//         <p>{pokemon.weight} Kg</p>\n//         {pokemon.types && <p>{pokemon.types[0].type.name}</p>}\n//         {pokemon.sprites && (\n//           <img src={pokemon.sprites.front_default} alt={pokemon.name} />\n//         )}\n//       </div>\n//     );\n//   }\n// }\n// export default PokeCard;","map":{"version":3,"sources":["C:/Users/LaFlamme/Desktop/Guilherme-Guy/semana9/pokeapi/src/components/PokeCard/Index.js"],"names":["React","useState","useEffect","axios","Index","props","pokemonOne","setPokemonOne","pegaPokemon","pokeName","get","then","response","data","catch","err","console","log","pokemon","name","weight","types","type","sprites","front_default"],"mappings":"yLAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CAGA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,KAAD,CAAW,eAEeJ,QAAQ,CAAC,EAAD,CAFvB,wCAEdK,UAFc,eAEFC,aAFE,eAOrB,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,QAAD,CAAc,CAC9BN,KAAK,CACFO,GADH,6CAC4CD,QAD5C,GAEGE,IAFH,CAEQ,SAACC,QAAD,CAAc,CAClB;AACAL,aAAa,CAACK,QAAQ,CAACC,IAAV,CAAb,CACD,CALH,EAMGC,KANH,CAMS,SAACC,GAAD,CAAS,CACdC,OAAO,CAACC,GAAR,CAAYF,GAAZ,EACD,CARH,EASD,CAVH,CAYEb,SAAS,CAAC,UAAM,CACdM,WAAW,CAACH,KAAK,CAACa,OAAP,CAAX,CACD,CAFQ,CAEN,CAACb,KAAK,CAACa,OAAP,CAFM,CAAT,CAKF;AAEA,mBACI,4CACA,6BAAIZ,UAAU,CAACa,IAAf,CADA,cAEA,6BAAIb,UAAU,CAACc,MAAf,OAFA,CAGCd,UAAU,CAACe,KAAX,eAAoB,6BAAIf,UAAU,CAACe,KAAX,CAAiB,CAAjB,EAAoBC,IAApB,CAAyBH,IAA7B,CAHrB,CAICb,UAAU,CAACiB,OAAX,eACC,2BAAK,GAAG,CAAEjB,UAAU,CAACiB,OAAX,CAAmBC,aAA7B,CAA4C,GAAG,CAAElB,UAAU,CAACa,IAA5D,EALF,CADJ,CAUH,CApCD,CAsCA,cAAef,CAAAA,KAAf,CAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nconst Index = (props) => {\r\n\r\n    const [pokemonOne, setPokemonOne] = useState({});\r\n\r\n\r\n\r\n\r\n    const pegaPokemon = (pokeName) => {\r\n        axios\r\n          .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\r\n          .then((response) => {\r\n            // guarda as infos do pokemon no estado\r\n            setPokemonOne(response.data);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n          });\r\n      };\r\n    \r\n      useEffect(() => {\r\n        pegaPokemon(props.pokemon);\r\n      }, [props.pokemon]);\r\n  \r\n\r\n    //   const pokemon = pokemon;\r\n\r\n    return (\r\n        <div>\r\n        <p>{pokemonOne.name}</p>\r\n        <p>{pokemonOne.weight} Kg</p>\r\n        {pokemonOne.types && <p>{pokemonOne.types[0].type.name}</p>}\r\n        {pokemonOne.sprites && (\r\n          <img src={pokemonOne.sprites.front_default} alt={pokemonOne.name} />\r\n        )}\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Index\r\n\r\n\r\n// class PokeCard extends React.Component {\r\n//   state = {\r\n//     // valor do estado que guarda infos e foto do pokemon\r\n//     pokemon: {}\r\n//   };\r\n\r\n//   // método que roda após a montagem do componente\r\n//   componentDidMount() {\r\n//     this.pegaPokemon(this.props.pokemon);\r\n//   }\r\n\r\n//   // método que roda após a atualização do componente.\r\n//   // Um dos casos de atualização do componente é a\r\n//   // mudança da props que está sendo passado pra ele\r\n//   componentDidUpdate(prevProps) {\r\n//     // aqui, é feita uma verificação da props anterior com a props atual.\r\n//     // Caso a props anterior seja diferente da props atual,\r\n//     // a função pegaPokemon é chamada.\r\n//     if (prevProps.pokemon !== this.props.pokemon) {\r\n//       this.pegaPokemon(this.props.pokemon);\r\n//     }\r\n//   }\r\n\r\n//   // função que bate na poke API com um nome específico de pokemon\r\n//   // Isso permite que consigamos pegar as infos dos pokemons.\r\n//   // Nos métodos de ciclo de vida, ela é chamada passando como\r\n//   // parâmetro o nome de pokemon que está chegando como props.\r\n//   pegaPokemon = pokeName => {\r\n//     axios\r\n//       .get(`https://pokeapi.co/api/v2/pokemon/${pokeName}`)\r\n//       .then(response => {\r\n//         // guarda as infos do pokemon no estado\r\n//         this.setState({ pokemon: response.data });\r\n//       })\r\n//       .catch(err => {\r\n//         console.log(err);\r\n//       });\r\n//   };\r\n\r\n//   render() {\r\n//     const pokemon = this.state.pokemon;\r\n\r\n//     return (\r\n//       <div>\r\n//         <p>{pokemon.name}</p>\r\n//         <p>{pokemon.weight} Kg</p>\r\n//         {pokemon.types && <p>{pokemon.types[0].type.name}</p>}\r\n//         {pokemon.sprites && (\r\n//           <img src={pokemon.sprites.front_default} alt={pokemon.name} />\r\n//         )}\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default PokeCard;\r\n"]},"metadata":{},"sourceType":"module"}